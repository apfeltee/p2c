{*
Declarations for Pascal built-in objects
Note: All functions with unusual syntaxes are not included here
*)
(* If Language=UCSD, make sure we can parse "__module" *)
{*IgnoreNonAlpha=0}
{*UseRefs=0}
__module SYSTEM;   (*PERMANENT*)
    __export
        var ErrOutput: Text;
        var output: Text;
        var input: Text;
        (* NB: p2c turns these into stdin_, stdout_, stderr_ for some reason *)
        (*
        var stdin: Text;
        var stdout: Text;
        var stderr : Text;
        *)
        (* Standard Pascal functions *)
        function  arctan(x : longreal) : longreal;
        function  cos(x : longreal) : longreal;
        function  exp(x : longreal) : longreal;
        function  ln(x : longreal) : longreal;
        procedure mark(var p);
        function  odd(i : integer) : boolean;
        procedure release(var p);
        function  round(x : longreal) : integer;
        function  sin(x : longreal) : longreal;
        function  sqrt(x : longreal) : longreal;
        function  trunc(x : longreal) : integer;
        (* HP Pascal extensions *)
        function  binary(s : string) : integer;
        procedure gotoxy(x, y : integer);
        function  hex(s : string) : integer;
        function  lastpos(anyvar f : text) : integer;
        function  linepos(var f : text) : integer;
        procedure moveleft(anyvar s, d : integer; i : integer);
        procedure moveright(anyvar s, d : integer; i : integer);
        function  octal(s : string) : integer;
        function  str(s : string; i, j : integer) : string;
        function  strlen(s : string) : integer;
        function  strltrim(s : string) : string;
        function  strmax(s : string) : integer;
        function  strpos(s, s2 : string) : integer;
        function  strrpt(s : string; i : integer) : string;
        function  strrtrim(s : string) : string;
        (* Turbo/UCSD Pascal extensions *)
        function  copy(s : string; i, j : integer) : string;
        procedure delete(var s; i, j : integer);
        function  frac(x : longreal) : longreal;
        procedure freemem(var p);
        procedure getmem(var p; i : integer);
        procedure insert(s : string; var s2; i : integer);
        function  length(s : string) : integer;
        function  log(x : longreal) : longreal;
        function  maxavail : integer;
        function  memavail : integer;
        procedure move(var s, d; i : integer);
        function  paramcount : integer;
        function  paramstr(i : integer) : string;
        function  pos(s, s2 : string) : integer;
        function  ptr(i, j : integer) : pointer;
        function  pwroften(r : longreal) : longreal;
        function  swap(i : integer) : integer;
        function  upcase(c : char) : char;
        (* Turbo standard variables *)
        var
           HeapPtr, FreePtr: pointer;
        (* Oregon Software Pascal-2 extensions *)
        {FuncMacro p2_inew(n) = malloc(n)}
        {FuncMacro p2_new(x,n) = (*x = Malloc(n))}
        {FuncMacro p2_dispose(x,n) = Free(*x)}
        procedure noioerror(var f);
        function ioerror(var f) : boolean;
        function iostatus(var f) : integer;
        {FuncMacro exitst(s) = exit(s)}
        procedure exitst(s : integer);
        {FuncMacro P_getcmdline(low,high,line,len)=(*len=P_getcmdline(low,high,line))}
        procedure P_getcmdline(var line : array [low..high : integer] of char; var len : integer);
        procedure TimeStamp(var day, month, year, hour, min, sec : integer);
        (* VAX Pascal extensions *)
        function  expo(r : real) : integer;
        function  index(s, s2 : string) : integer;
        function  pad(s : string; padchar : char; size : integer) : string;
        function  substr(s : string; i, j : integer) : string;
        function  uround(x : longreal) : integer;
        function  utrunc(x : longreal) : integer;
        { MPW Pascal extensions }
        function  arccos(r : longreal) : longreal;
        function  arcsin(r : longreal) : longreal;
        function  arctanh(r : longreal) : longreal;
        function  cosh(r : longreal) : longreal;
        function  exp10(r : longreal) : longreal;
        function  log10(r : longreal) : longreal;
        function  scaneq(limit : integer; ch : char; var s : univ integer) : integer;
        function  scanne(limit : integer; ch : char; var s : univ integer) : integer;
        function  sinh(r : longreal) : longreal;
        function  tan(r : longreal) : longreal;
        function  tanh(r : longreal) : longreal;
        (* why is this missing? *)
        procedure Assign(f: file; Name: ShortString);
        procedure Assign(f: file; p: PAnsiChar);
        procedure Assign(f: file; c: AnsiChar);
        procedure Assign(f: file; Name: UnicodeString);
        procedure Assign(f: file; Name: RawByteString);
        procedure Assign(f: TypedFile; Name: shortstring);
        procedure Assign(
          f: TypedFile;
          p: PAnsiChar
        );
        procedure Assign(
          f: TypedFile;
          c: AnsiChar
        );
        procedure Assign(
          f: TypedFile;
          Name: unicodestring
        );
        procedure Assign(
          f: TypedFile;
          Name: RawByteString
        );
        procedure Assign(
          t: Text;
          s: shortstring
        );
        procedure Assign(
          t: Text;
          p: PAnsiChar
        );
        procedure Assign(
          t: Text;
          c: AnsiChar
        );
        procedure Assign(
          t: Text;
          s: unicodestring
        );
        procedure Assign(
          t: Text;
          s: RawByteString
        );
        { SUN Pascal extensions }
        type alfa = packed array [1..10] of char;
        {FuncMacro argc = P_argc}
        function  argc : integer;
        {FuncMacro null = 0}
        procedure null;
end.
